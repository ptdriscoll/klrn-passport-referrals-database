INTERFACE



=======================================================

WORKFLOW

Run db_pages
Run db_referrers
Run db_videos

Run queries_counts - to get monthy counts, according to set dates 
Run queries_views_channels - stats or trends


Tasks
Split stats for total referrals and total donations
##Add timeline visualization for trends
Add auto backup for database 

Create module to check for unscraped pages after each referrers insert 
Create module to check for unscraped pages after each videos insert 

Rewrite test specifically as a module to check and test scrapers
**Try to fix NOVA scrape by using ghostdriver to wait until iframe is loaded
    and then i.e. grab div.id = video_3000273548 
    
    Or create new scraper to grab all partnerPlayers like this 
    
    

=======================================================

https://secure.klrn.org/alleg/WebModule/Donate.aspx?P=PLGGEN&PAGETYPE=PLG&CHECK=C79Cu%2fKopVmCpDRh%2bWheQRiCxtaFReuS

/alleg/webmodule/donate.aspx?p=webpass&pagetype=plg&check=w/davpgzkanmehhuysseiozwdez+ea1m&referrer=http://www.pbs.org/video/2365541690/

https://secure.klrn.org/alleg/webmodule/donate.aspx?p=webpass&pagetype=plg&check=w/davpgzkanmehhuysseiozwdez+ea1m&referrer=http://www.pbs.org/video/2365541690/


=======================================================

CREATE TABLE IF NOT EXISTS Pages
(
id INTEGER PRIMARY KEY,
page TEXT,
date_seconds_id INTEGER, 
referrer_id INTEGER,
pageviews INTEGER,
unique_pageviews INTEGER, 
time_on_page REAL, 
bounces INTEGER,
entrances INTEGER, 
exits INTEGER, 
page_value REAL,
FOREIGN KEY(date_seconds_id) REFERENCES Dates(ordinal_id) 
FOREIGN KEY(referrer_id) REFERENCES Referrers(id) 
)

CREATE TABLE IF NOT EXISTS Dates
(
seconds_id INTEGER PRIMARY KEY,
date TEXT,
temp INTEGER
)

CREATE TABLE IF NOT EXISTS Referrers
(
id INTEGER PRIMARY KEY,
referrer TEXT NOT NULL UNIQUE,
video_id INTEGER, 
title TEXT,
page_scraped INTEGER
)     
        
CREATE TABLE IF NOT EXISTS Videos
(
id INTEGER PRIMARY KEY,	
title TEXT,	
content_channel TEXT,	
description TEXT,
image TEXT,
page_scraped INTEGER
)   

 

=======================================================    
    
Conversions

id
video_id / affiliation
date
transaction_id
revenue





=======================================================

NULL Handling in SQLite Versus Other Database Engines
https://www.sqlite.org/nulls.html

SQLite Python
http://www.sqlitetutorial.net/sqlite-python/sqlite-python-select/

=======================================================

database calls
  select date
  insert data
  update temporary

get_dates:
  get today's date
  get last date updated that is not temporary
  create dates list from last update to current day
  
get_data(dates):
  get data
  
  keep lists of dates with no data
  check if date already has data, and is not temporary: continue
  check if day is within last 3 days: temporary = 1 
  input into db

  return list of errors  

run(dates=None, errors=None): 
  if errors:
    get errors from errors file
    errors = get_data(errors_file)
    replace errors in file with latest errors
  if dates:
    errors = get_data(dates) 
    add errors to other errors in file    
  if not errors and not dates:
    dates = get_dates()
    errors = get_data(dates) 
    add errors to other errors in file      

--update
--update errors
--update dates=""

  
  
=======================================================

actionField
  option
  list

products 
  metric1
  dimension1
  variant
  category
    
promotions
  id    
  
Rather than setting up a tag, you will need to define all custom dimensions as variables in GTM, and then declare those within your Universal Analytics tag (you will also need to set these up within Google Analytics, but we will discuss that in the next section). 

you first need to declare a Data Layer Variable named Size with Data Layer Variable Name = dimension1. Save this and go to the More settings dropdown in your Universal Analytics tag. Click on the Custom Dimensions dropdown, click Add Custom Dimension, set the Index equal to the dimension number (in this case 1) and the Dimension Value equal to the Size variable you just created. 

Enhanced Ecommerce (UA) Developer Guide
https://developers.google.com/tag-manager/enhanced-ecommerce#purchases

Setting Up Enhanced Ecommerce Using Google Tag Manager and the Data Layer
http://flintanalytics.com/installing-enhanced-ecommerce-using-google-tag-manager-and-the-data-layer/

Custom dimensions & metrics
https://support.google.com/analytics/answer/2709828?hl=en

Complete Guide to Dimensions and Metrics 
https://www.optimizesmart.com/complete-guide-to-dimensions-and-metrics-in-google-analytics/
    
=======================================================

sys.path.insert(0, 'c:/python27/lib/site-packages')
from selenium import webdriver 
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

chrome_path = 'C:/Program Files (x86)/Google/Chrome/Application/chrome.exe %s'
firefox_path = 'C:/Program Files (x86)/Mozilla Firefox/firefox.exe %s'

def get_id_from_video_page(url):
    #driver = webdriver.Firefox(executable_path = 'bin/geckodriver.exe')
    #driver = webdriver.Chrome('bin/chromedriver.exe')
    browser.get(chrome_path).open(url, new=2)

    
    try:
        driver.get(url)
        #wait = WebDriverWait(driver, 10)
        #wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, '#iframePlayer')))
        #driver.implicitly_wait(3)
        html = driver.page_source
        return
        
    except:
        print 'NO CONNECTION'
        #driver.close()
        #driver.quit()
        return None
    
    soup = BeautifulSoup(html, 'lxml')  
    video = soup.find('div', class_='pageContainer')    
    print video
    #if video and video.has_attr('id') and 'video_' in video['id']:
    #    return video['id'].split('video_')[1]
    
    #driver.close()
    #driver.quit()
    return None   










 

var meta = {}, page = document.querySelector('#pageDescription'), key;

if (page) {
  meta.channel = page.querySelector('.program a');
  meta.title = page.querySelector('h2.title'); 
}

meta.description = document.querySelector('#description');

for (key in meta) {
  if (meta[key]) meta[key] = meta[key].innerHTML.trim();
}

meta.channel = meta.channel.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();}); 

for (key in meta) {
  console.log(key.toUpperCase() + ': ' + meta[key])
}


          #this metric filter limits data for testing 
          'metricFilterClauses': [{
            'filters': [{
                'metricName': 'ga:pageviews',
                'operator': 'GREATER_THAN',
                'comparisonValue': '1'
            }] 
          }],
          
          
          
          
          
        #parse response  
        '''
        for report in response.get('reports', []):
            columnHeader = report.get('columnHeader', {})
            dimensionHeaders = columnHeader.get('dimensions', [])
            metricHeaders = columnHeader.get('metricHeader', {}).get('metricHeaderEntries', [])
            rows = report.get('data', {}).get('rows', [])
            
            row_count = 0 
            for row in rows:
                print 'ROW_COUNT: ', row_count
                data.append({})
                print ''
                dimensions = row.get('dimensions', [])
                dateRangeValues = row.get('metrics', [])
    
                for header, dimension in zip(dimensionHeaders, dimensions):
                    print header + ': ' + dimension
                    data[row_count][header[3:]] = dimension
        
                for i, values in enumerate(dateRangeValues):
                    print 'Date range (' + str(i) + ')'
                    for metricHeader, value in zip(metricHeaders, values.get('values')):
                        print metricHeader.get('name') + ': ' + value
                        data[row_count][metricHeader.get('name')[3:]] = value
                        
                row_count += 1                        
        '''          
          
          
matplotlib pie charts that look good

http://www.nxn.se/valent/making-nicer-looking-pie-charts-with-matplotlib

https://chrisalbon.com/python/matplotlib_pie_chart.html

https://gist.github.com/vals/5257113
          
          
          